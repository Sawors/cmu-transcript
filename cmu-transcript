#!/bin/env bash

# This scripts is used to connect all the others into
# one single streamlined process. You should normally
# never have to use the other scripts alone.

# Takes the file to analyze as its first argument.

# By default, the trimmed audio is not saved. To save it,
# use the -s or --save parameter after the audio file path to
# save the trimmed audio (it allows for faster successive
# transcriptions of the same audio file).

# If a cached trimmed audio is found, the script will attempt
# to use it instead of trimming the audio again. To avoid this
# behaviour, use the parameter --no-cache or -c. This completely
# negates the advantage of saving the audio with --save (at least
# for this program).

file=$1

if ! test -f "$file"; then
	echo "ERROR: Please provide a valid file."
	echo "Usage : cmu-transcript [file_path]"
	exit
fi

save_trimmed=false
use_cache=true
trimmed_cache_file="data/trimmed/$file_name"

if [[ "$@" == *"--save"* || "$@" == *"-s"* ]]; then
	save_trimmed=true
fi

if [[ "$@" == *"--no-cache"* || "$@" == *"-c"* ]]; then
	use_cache=false
fi


output=""
file_name=$(basename -- "$file")
trimmed_name="${file_name%.*}_trimmed.ogg"
echo $file_name

if [[ $save_trimmed = false ]]; then
	output="/tmp/$trimmed_name"
else
	output=$trimmed_cache_file
fi

if test -f trimmed_cache_file && [[ $use_cache = true ]]; then
	echo "trimmed audio found in cache, ignoring trimming process..."
	echo "using the cached file $output for the transcription process"
	output=$trimmed_cache_file
else
	echo "trimmed file will be saved as $output"
	echo "trimming audio file..."
	./src/trim-audio.py "$file" "$output"
	echo "trimming of audio file done!"
fi

echo "transcripting audio..."
./src/transcript.py "$output"
echo "transcritption done!"

if [[ $save_trimmed = false ]]; then
	rm $output
	echo "temporary audio file cleaned up!"
fi
